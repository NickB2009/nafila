# Docker Compose for Production Environment
# Phase 9: Production deployment configuration

version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: GrandeTech.QueueHub.API/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__MySqlConnection=Server=${MYSQL_HOST};Database=${MYSQL_DATABASE};User=${MYSQL_USER};Password=${MYSQL_PASSWORD};Port=${MYSQL_PORT};CharSet=utf8mb4;SslMode=Required;Pooling=true;MinimumPoolSize=10;MaximumPoolSize=100;ConnectionTimeout=30;CommandTimeout=30;
      - JWT__SecretKey=${JWT_SECRET_KEY}
      - JWT__Issuer=${JWT_ISSUER}
      - JWT__Audience=${JWT_AUDIENCE}
      - JWT__ExpirationMinutes=${JWT_EXPIRATION_MINUTES}
      - RateLimiting__RequestsPerMinute=${RATE_LIMIT_REQUESTS_PER_MINUTE}
      - DataAnonymization__Salt=${DATA_ANONYMIZATION_SALT}
      - ApplicationInsights__ConnectionString=${APPLICATION_INSIGHTS_CONNECTION_STRING}
      - Logging__LogLevel__Default=Warning
      - Logging__LogLevel__Microsoft=Warning
      - Logging__LogLevel__System=Warning
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - queuehub-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./scripts/mysql-optimization-indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql
      - ./scripts/mysql-performance-config.sql:/docker-entrypoint-initdb.d/03-performance.sql
      - ./scripts/mysql-monitoring-setup.sql:/docker-entrypoint-initdb.d/04-monitoring.sql
      - ./scripts/mysql-security-setup.sql:/docker-entrypoint-initdb.d/05-security.sql
      - ./scripts/mysql-post-migration-optimization.sql:/docker-entrypoint-initdb.d/06-post-migration.sql
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=2G
      --innodb-log-file-size=512M
      --innodb-flush-log-at-trx-commit=1
      --max-connections=500
      --slow-query-log=1
      --long-query-time=0.5
      --log-queries-not-using-indexes=1
      --innodb-adaptive-hash-index=1
      --innodb-buffer-pool-instances=8
      --innodb-io-capacity=2000
      --innodb-io-capacity-max=4000
    networks:
      - queuehub-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    networks:
      - queuehub-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - queuehub-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  appinsights:
    image: mcr.microsoft.com/applicationinsights/applicationinsights:latest
    environment:
      - APPLICATIONINSIGHTS_CONNECTION_STRING=${APPLICATION_INSIGHTS_CONNECTION_STRING}
    networks:
      - queuehub-network
    restart: always

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - queuehub-network
    restart: always

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - queuehub-network
    restart: always

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  queuehub-network:
    driver: bridge