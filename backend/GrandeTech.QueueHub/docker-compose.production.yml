version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: GrandeTech.QueueHub.API/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - Database__UseSqlDatabase=true
      - Database__UseInMemoryDatabase=false
      - Database__AutoMigrate=true
      - Database__SeedData=false
      - ConnectionStrings__MySqlConnection=${MYSQL_CONNECTION_STRING}
      - MySql__ServerVersion=${MYSQL_SERVER_VERSION:-8.0.0}
      - MySql__EnableRetryOnFailure=true
      - MySql__MaxRetryCount=5
      - MySql__MaxRetryDelay=30
      - MySql__CommandTimeout=60
      - MySql__MaxBatchSize=1000
      - MySql__EnableStringComparisonTranslations=true
      - MySql__EnableSensitiveDataLogging=false
      - MySql__EnableDetailedErrors=false
      - RateLimiting__MaxRequestsPerWindow=100
      - RateLimiting__WindowMinutes=1
      - DataAnonymization__DataRetentionDays=365
      - DataAnonymization__InactiveDataRetentionDays=90
      - SecurityAudit__EnableAuditing=true
      - SecurityAudit__LogSuccessfulOperations=false
      - SecurityAudit__LogFailedOperations=true
      - PerformanceMonitoring__MaxHistoryPoints=10000
      - PerformanceMonitoring__CleanupIntervalMinutes=60
      - PerformanceMonitoring__MetricRetentionHours=168
      - JWT__Key=${JWT_KEY}
      - JWT__Issuer=${JWT_ISSUER:-GrandeTech.QueueHub.API}
      - JWT__Audience=${JWT_AUDIENCE:-GrandeTech.QueueHub.API}
      - DataAnonymization__HashSalt=${DATA_ANONYMIZATION_SALT}
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - queuehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-QueueHubDb}
      - MYSQL_USER=${MYSQL_USER:-queuehub}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./scripts/migrate-json-data.sql:/docker-entrypoint-initdb.d/02-json-migration.sql
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=1G --max-connections=200
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s
    networks:
      - queuehub-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - queuehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - queuehub-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  queuehub-network:
    driver: bridge
