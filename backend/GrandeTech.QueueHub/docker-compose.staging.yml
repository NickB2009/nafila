# Docker Compose for Staging Environment
# Phase 9: Staging deployment configuration

services:
  api:
    build:
      context: ./GrandeTech.QueueHub.API
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      - ConnectionStrings__MySqlConnection=Server=mysql;Database=QueueHubDb;User=queuehub_user;Password=${MYSQL_PASSWORD};Port=3306;CharSet=utf8mb4;SslMode=None;Pooling=true;MinimumPoolSize=5;MaximumPoolSize=50;
      - JWT__SecretKey=${JWT_SECRET_KEY}
      - JWT__Issuer=GrandeTech.QueueHub.Staging
      - JWT__Audience=GrandeTech.QueueHub.Staging
      - JWT__ExpirationMinutes=60
      - RateLimiting__RequestsPerMinute=1000
      - DataAnonymization__Salt=${DATA_ANONYMIZATION_SALT}
      - ApplicationInsights__ConnectionString=${APPLICATION_INSIGHTS_CONNECTION_STRING}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - queuehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=QueueHubDb
      - MYSQL_USER=queuehub_user
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./scripts/mysql-optimization-indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql
      - ./scripts/mysql-performance-config.sql:/docker-entrypoint-initdb.d/03-performance.sql
      - ./scripts/mysql-monitoring-setup.sql:/docker-entrypoint-initdb.d/04-monitoring.sql
      - ./scripts/mysql-security-setup.sql:/docker-entrypoint-initdb.d/05-security.sql
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=512M
      --innodb-log-file-size=128M
      --innodb-flush-log-at-trx-commit=2
      --max-connections=200
      --slow-query-log=1
      --long-query-time=1
      --log-queries-not-using-indexes=1
    networks:
      - queuehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - queuehub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - queuehub-network
    restart: unless-stopped

  # appinsights:
  #   image: mcr.microsoft.com/applicationinsights/applicationinsights:latest
  #   environment:
  #     - APPLICATIONINSIGHTS_CONNECTION_STRING=${APPLICATION_INSIGHTS_CONNECTION_STRING}
  #   networks:
  #     - queuehub-network
  #   restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  queuehub-network:
    driver: bridge
