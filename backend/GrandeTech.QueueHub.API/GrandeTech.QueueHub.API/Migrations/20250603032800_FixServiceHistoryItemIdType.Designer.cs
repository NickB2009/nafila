// <auto-generated />
using System;
using GrandeTech.QueueHub.API.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GrandeTech.QueueHub.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250603032800_FixServiceHistoryItemIdType")]
    partial class FixServiceHistoryItemIdType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Advertising.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayDurationSeconds")
                        .HasColumnType("int");

                    b.Property<int>("DisplayPriority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServicesProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteServicesProviderIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FavoriteServicesProviderIds");

                    b.Property<bool>("IsAnonymous")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("NotificationsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PreferredNotificationChannel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeepLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Organizations.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("SharesDataForAnalytics")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Promotions.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CurrentUsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaxUsageCount")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ServicesProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ServicesProviderId");

                    b.ToTable("Coupons", (string)null);
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Queues.Queue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LateClientCapTimeInMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<int>("MaxSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(50);

                    b.Property<DateTime>("QueueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServicesProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServicesProviderId", "QueueDate")
                        .IsUnique();

                    b.ToTable("Queues", (string)null);
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Queues.QueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CalledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckedInAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnteredAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EstimatedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EstimatedStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationChannel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NotificationSentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ServiceDurationMinutes")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TokenNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("StaffMemberId");

                    b.HasIndex("QueueId", "Position");

                    b.HasIndex("QueueId", "Status");

                    b.HasIndex("QueueId", "TokenNumber")
                        .IsUnique()
                        .HasFilter("[TokenNumber] IS NOT NULL");

                    b.ToTable("QueueEntries", (string)null);
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.ServicesProviders.ServicesProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageServiceTimeInMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(15.0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQueueEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastAverageTimeReset")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LateClientCapTimeInMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<int>("MaxQueueSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ServicesProviders", (string)null);
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Services.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActualAverageDurationMinutes")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ServicesProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimesProvided")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ServicesProviderId");

                    b.ToTable("ServiceTypes", (string)null);
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Staff.StaffBreak", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledEndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StaffMemberId");

                    b.ToTable("StaffBreaks");
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Staff.StaffMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageServiceTimeInMinutes")
                        .HasColumnType("float");

                    b.Property<int>("CompletedServicesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnDuty")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ServicesProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StaffMembers", (string)null);
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Subscriptions.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IncludesAdvancedReporting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IncludesAdvertising")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IncludesAnalytics")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IncludesCustomBranding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IncludesMultipleLocations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaxQueueEntriesPerDay")
                        .HasColumnType("int");

                    b.Property<int>("MaxServicesProviders")
                        .HasColumnType("int");

                    b.Property<int>("MaxStaffPerServicesProvider")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans", (string)null);
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Customers.Customer", b =>
                {
                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(320)
                                .HasColumnType("nvarchar(320)")
                                .HasColumnName("Email");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("PhoneCountryCode");

                            b1.Property<string>("NationalNumber")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("PhoneNationalNumber");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsMany("GrandeTech.QueueHub.API.Domain.Customers.ServiceHistoryItem", "ServiceHistory", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Feedback")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("Feedback");

                            b1.Property<string>("Notes")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("Notes");

                            b1.Property<int?>("Rating")
                                .HasColumnType("int")
                                .HasColumnName("Rating");

                            b1.Property<DateTime>("ServiceDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ServiceDate");

                            b1.Property<Guid>("ServicesProviderId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ServicesProviderId");

                            b1.Property<Guid>("ServiceTypeId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ServiceTypeId");

                            b1.Property<Guid>("StaffMemberId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("StaffMemberId");

                            b1.HasKey("Id");

                            b1.HasIndex("CustomerId");

                            b1.ToTable("CustomerServiceHistory", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Email");

                    b.Navigation("PhoneNumber");

                    b.Navigation("ServiceHistory");
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Organizations.Organization", b =>
                {
                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.BrandingConfig", "BrandingConfig", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BrandingCompanyName");

                            b1.Property<string>("FaviconUrl")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("BrandingFaviconUrl");

                            b1.Property<string>("FontFamily")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("BrandingFontFamily");

                            b1.Property<string>("LogoUrl")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("BrandingLogoUrl");

                            b1.Property<string>("PrimaryColor")
                                .IsRequired()
                                .HasMaxLength(7)
                                .HasColumnType("nvarchar(7)")
                                .HasColumnName("BrandingPrimaryColor");

                            b1.Property<string>("SecondaryColor")
                                .IsRequired()
                                .HasMaxLength(7)
                                .HasColumnType("nvarchar(7)")
                                .HasColumnName("BrandingSecondaryColor");

                            b1.Property<string>("TagLine")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("BrandingTagLine");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Email", "ContactEmail", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("ContactEmail");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.PhoneNumber", "ContactPhone", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("ContactPhoneCountryCode");

                            b1.Property<string>("NationalNumber")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("ContactPhoneNationalNumber");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("ContactPhone");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Slug", "Slug", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Slug");

                            b1.HasKey("OrganizationId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.Navigation("BrandingConfig")
                        .IsRequired();

                    b.Navigation("ContactEmail");

                    b.Navigation("ContactPhone");

                    b.Navigation("Slug")
                        .IsRequired();
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Promotions.Coupon", b =>
                {
                    b.HasOne("GrandeTech.QueueHub.API.Domain.ServicesProviders.ServicesProvider", null)
                        .WithMany()
                        .HasForeignKey("ServicesProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Money", "FixedDiscountAmount", b1 =>
                        {
                            b1.Property<Guid>("CouponId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("FixedDiscountAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("FixedDiscountCurrency");

                            b1.HasKey("CouponId");

                            b1.ToTable("Coupons");

                            b1.WithOwner()
                                .HasForeignKey("CouponId");
                        });

                    b.Navigation("FixedDiscountAmount");
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Queues.Queue", b =>
                {
                    b.HasOne("GrandeTech.QueueHub.API.Domain.ServicesProviders.ServicesProvider", null)
                        .WithMany()
                        .HasForeignKey("ServicesProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Queues.QueueEntry", b =>
                {
                    b.HasOne("GrandeTech.QueueHub.API.Domain.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrandeTech.QueueHub.API.Domain.Queues.Queue", null)
                        .WithMany("Entries")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GrandeTech.QueueHub.API.Domain.Services.ServiceType", null)
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GrandeTech.QueueHub.API.Domain.Staff.StaffMember", null)
                        .WithMany()
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.ServicesProviders.ServicesProvider", b =>
                {
                    b.HasOne("GrandeTech.QueueHub.API.Domain.Organizations.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Address", "Location", b1 =>
                        {
                            b1.Property<Guid>("ServicesProviderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Country");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("Latitude");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("Longitude");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Number");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Street");

                            b1.HasKey("ServicesProviderId");

                            b1.ToTable("ServicesProviders");

                            b1.WithOwner()
                                .HasForeignKey("ServicesProviderId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.TimeSpanRange", "BusinessHours", b1 =>
                        {
                            b1.Property<Guid>("ServicesProviderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeSpan>("End")
                                .HasColumnType("time")
                                .HasColumnName("BusinessHoursEnd");

                            b1.Property<TimeSpan>("Start")
                                .HasColumnType("time")
                                .HasColumnName("BusinessHoursStart");

                            b1.HasKey("ServicesProviderId");

                            b1.ToTable("ServicesProviders");

                            b1.WithOwner()
                                .HasForeignKey("ServicesProviderId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Email", "ContactEmail", b1 =>
                        {
                            b1.Property<Guid>("ServicesProviderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("ContactEmail");

                            b1.HasKey("ServicesProviderId");

                            b1.ToTable("ServicesProviders");

                            b1.WithOwner()
                                .HasForeignKey("ServicesProviderId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.PhoneNumber", "ContactPhone", b1 =>
                        {
                            b1.Property<Guid>("ServicesProviderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("ContactPhoneCountryCode");

                            b1.Property<string>("NationalNumber")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("ContactPhoneNationalNumber");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("ContactPhone");

                            b1.HasKey("ServicesProviderId");

                            b1.ToTable("ServicesProviders");

                            b1.WithOwner()
                                .HasForeignKey("ServicesProviderId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.BrandingConfig", "CustomBranding", b1 =>
                        {
                            b1.Property<Guid>("ServicesProviderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FaviconUrl")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FontFamily")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("BrandingFontFamily");

                            b1.Property<string>("LogoUrl")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("BrandingLogoUrl");

                            b1.Property<string>("PrimaryColor")
                                .IsRequired()
                                .HasMaxLength(7)
                                .HasColumnType("nvarchar(7)")
                                .HasColumnName("BrandingPrimaryColor");

                            b1.Property<string>("SecondaryColor")
                                .IsRequired()
                                .HasMaxLength(7)
                                .HasColumnType("nvarchar(7)")
                                .HasColumnName("BrandingSecondaryColor");

                            b1.Property<string>("TagLine")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ServicesProviderId");

                            b1.ToTable("ServicesProviders");

                            b1.WithOwner()
                                .HasForeignKey("ServicesProviderId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Slug", "Slug", b1 =>
                        {
                            b1.Property<Guid>("ServicesProviderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Slug");

                            b1.HasKey("ServicesProviderId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("ServicesProviders");

                            b1.WithOwner()
                                .HasForeignKey("ServicesProviderId");
                        });

                    b.Navigation("BusinessHours")
                        .IsRequired();

                    b.Navigation("ContactEmail");

                    b.Navigation("ContactPhone");

                    b.Navigation("CustomBranding");

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Slug")
                        .IsRequired();
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Services.ServiceType", b =>
                {
                    b.HasOne("GrandeTech.QueueHub.API.Domain.ServicesProviders.ServicesProvider", null)
                        .WithMany()
                        .HasForeignKey("ServicesProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ServiceTypeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("PriceCurrency");

                            b1.HasKey("ServiceTypeId");

                            b1.ToTable("ServiceTypes");

                            b1.WithOwner()
                                .HasForeignKey("ServiceTypeId");
                        });

                    b.Navigation("Price");
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Staff.StaffBreak", b =>
                {
                    b.HasOne("GrandeTech.QueueHub.API.Domain.Staff.StaffMember", null)
                        .WithMany("Breaks")
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Staff.StaffMember", b =>
                {
                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("StaffMemberId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(320)
                                .HasColumnType("nvarchar(320)")
                                .HasColumnName("Email");

                            b1.HasKey("StaffMemberId");

                            b1.ToTable("StaffMembers");

                            b1.WithOwner()
                                .HasForeignKey("StaffMemberId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("StaffMemberId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("PhoneCountryCode");

                            b1.Property<string>("NationalNumber")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("PhoneNationalNumber");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("StaffMemberId");

                            b1.ToTable("StaffMembers");

                            b1.WithOwner()
                                .HasForeignKey("StaffMemberId");
                        });

                    b.Navigation("Email");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Subscriptions.SubscriptionPlan", b =>
                {
                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Money", "MonthlyPrice", b1 =>
                        {
                            b1.Property<Guid>("SubscriptionPlanId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("MonthlyPriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("MonthlyPriceCurrency");

                            b1.HasKey("SubscriptionPlanId");

                            b1.ToTable("SubscriptionPlans");

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionPlanId");
                        });

                    b.OwnsOne("GrandeTech.QueueHub.API.Domain.Common.ValueObjects.Money", "YearlyPrice", b1 =>
                        {
                            b1.Property<Guid>("SubscriptionPlanId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("YearlyPriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("YearlyPriceCurrency");

                            b1.HasKey("SubscriptionPlanId");

                            b1.ToTable("SubscriptionPlans");

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionPlanId");
                        });

                    b.Navigation("MonthlyPrice")
                        .IsRequired();

                    b.Navigation("YearlyPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Queues.Queue", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("GrandeTech.QueueHub.API.Domain.Staff.StaffMember", b =>
                {
                    b.Navigation("Breaks");
                });
#pragma warning restore 612, 618
        }
    }
}
