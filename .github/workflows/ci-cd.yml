name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  FLUTTER_VERSION: '3.24.0'

jobs:
  # Backend Build and Test
  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: |
        cd backend/GrandeTech.QueueHub
        dotnet restore
        
    - name: Build solution
      run: |
        cd backend/GrandeTech.QueueHub
        dotnet build --no-restore --configuration Release
        
    - name: Run tests
      run: |
        cd backend/GrandeTech.QueueHub
        dotnet test --no-build --verbosity normal --configuration Release
        
    - name: Run security scan
      run: |
        cd backend/GrandeTech.QueueHub
        dotnet list package --vulnerable
        
    - name: Build Docker image
      run: |
        cd backend/GrandeTech.QueueHub
        docker build -t queuehub-api:${{ github.sha }} -f GrandeTech.QueueHub.API/Dockerfile .
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/GrandeTech.QueueHub/bin/Release/

  # Frontend Build and Test
  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Get dependencies
      run: |
        cd frontend
        flutter pub get
        
    - name: Analyze code
      run: |
        cd frontend
        flutter analyze
        
    - name: Run tests
      run: |
        cd frontend
        flutter test
        
    - name: Build web
      run: |
        cd frontend
        flutter build web --release
        
    - name: Build Android
      run: |
        cd frontend
        flutter build apk --release
        
    - name: Build iOS
      run: |
        cd frontend
        flutter build ios --release --no-codesign
        
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  # Security and Quality Checks
  security-checks:
    name: Security & Quality
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp, javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'QueueHub'
        path: '.'
        format: 'HTML'
        out: 'reports'
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: reports/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: TestPassword123!
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 1433:1433
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Run integration tests
      run: |
        cd backend/GrandeTech.QueueHub
        dotnet test --filter "Category=Integration" --no-build --verbosity normal --configuration Release
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: backend/GrandeTech.QueueHub/TestResults/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install NBomber
      run: |
        dotnet tool install -g NBomber.CLI
        
    - name: Run performance tests
      run: |
        cd backend/GrandeTech.QueueHub
        dotnet test --filter "Category=Performance" --no-build --verbosity normal --configuration Release
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: backend/GrandeTech.QueueHub/TestResults/

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, security-checks, integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Azure App Service (Staging)
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'queuehub-staging'
        package: backend/GrandeTech.QueueHub/bin/Release/
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        
    - name: Deploy Frontend to Azure Storage (Staging)
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az storage blob upload-batch \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_STAGING }} \
            --auth-mode key \
            --source frontend/build/web \
            --destination '$web' \
            --overwrite

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, security-checks, integration-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Azure App Service (Production)
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'queuehub-production'
        package: backend/GrandeTech.QueueHub/bin/Release/
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PRODUCTION }}
        
    - name: Deploy Frontend to Azure Storage (Production)
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az storage blob upload-batch \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_PRODUCTION }} \
            --auth-mode key \
            --source frontend/build/web \
            --destination '$web' \
            --overwrite
            
    - name: Run smoke tests
      run: |
        # Wait for deployment to complete
        sleep 60
        
        # Test health endpoints
        curl -f https://queuehub-production.azurewebsites.net/health
        curl -f https://queuehub-production.azurewebsites.net/api/health
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "ðŸš€ Production deployment successful!"
        echo "Backend: https://queuehub-production.azurewebsites.net"
        echo "Frontend: https://queuehub-production.z13.web.core.windows.net"

  # Post-deployment monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Monitor application health
      run: |
        # Monitor for 5 minutes
        for i in {1..30}; do
          echo "Health check $i/30"
          curl -s https://queuehub-production.azurewebsites.net/health | jq .
          curl -s https://queuehub-production.azurewebsites.net/api/performance/summary | jq .
          sleep 10
        done
        
    - name: Generate deployment report
      run: |
        echo "## ðŸš€ Deployment Report" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** âœ… Successful" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Endpoints" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend API:** https://queuehub-production.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** https://queuehub-production.z13.web.core.windows.net" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** https://queuehub-production.azurewebsites.net/health" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance:** https://queuehub-production.azurewebsites.net/api/performance" >> $GITHUB_STEP_SUMMARY
