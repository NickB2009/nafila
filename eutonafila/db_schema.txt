# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    first_name = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class BarbershopBarbearia(models.Model):
    nome = models.CharField(max_length=100)
    slug = models.CharField(unique=True, max_length=50)
    telefone = models.CharField(max_length=20, blank=True, null=True)
    endereco = models.TextField(blank=True, null=True)
    cores = models.JSONField()
    logo = models.CharField(max_length=100, blank=True, null=True)
    horario_abertura = models.TimeField()
    horario_fechamento = models.TimeField()
    dias_funcionamento = models.JSONField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    descricao_curta = models.CharField(max_length=200, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING, blank=True, null=True)
    enable_priority_queue = models.BooleanField()
    max_capacity = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'barbershop_barbearia'


class BarbershopBarbeiro(models.Model):
    nome = models.CharField(max_length=100)
    telefone = models.CharField(max_length=20, blank=True, null=True)
    foto = models.CharField(max_length=100, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    barbearia = models.ForeignKey(BarbershopBarbearia, models.DO_NOTHING)
    usuario = models.OneToOneField(AuthUser, models.DO_NOTHING)
    status = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'barbershop_barbeiro'


class BarbershopCliente(models.Model):
    nome = models.CharField(max_length=100)
    telefone = models.CharField(max_length=15)
    email = models.CharField(max_length=254, blank=True, null=True)
    created_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'barbershop_cliente'


class BarbershopFila(models.Model):
    id = models.CharField(primary_key=True, max_length=32)
    horario_chegada = models.DateTimeField()
    horario_atendimento = models.DateTimeField(blank=True, null=True)
    horario_finalizacao = models.DateTimeField(blank=True, null=True)
    observacoes = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    barbearia = models.ForeignKey(BarbershopBarbearia, models.DO_NOTHING)
    barbeiro = models.ForeignKey(BarbershopBarbeiro, models.DO_NOTHING, blank=True, null=True)
    cliente = models.ForeignKey(BarbershopCliente, models.DO_NOTHING)
    servico = models.ForeignKey('BarbershopServico', models.DO_NOTHING)
    barbeiro_preferido = models.ForeignKey(BarbershopBarbeiro, models.DO_NOTHING, related_name='barbershopfila_barbeiro_preferido_set', blank=True, null=True)
    prioridade = models.IntegerField()
    status = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'barbershop_fila'


class BarbershopServico(models.Model):
    nome = models.CharField(max_length=100)
    descricao = models.TextField(blank=True, null=True)
    preco = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    duracao = models.IntegerField()
    imagem = models.CharField(max_length=100, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    barbearia = models.ForeignKey(BarbershopBarbearia, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'barbershop_servico'


class DjangoAdminLog(models.Model):
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoCeleryResultsChordcounter(models.Model):
    sub_tasks = models.TextField()
    count = models.PositiveIntegerField()
    group_id = models.CharField(unique=True, max_length=255)

    class Meta:
        managed = False
        db_table = 'django_celery_results_chordcounter'


class DjangoCeleryResultsGroupresult(models.Model):
    group_id = models.CharField(unique=True, max_length=255)
    date_created = models.DateTimeField()
    date_done = models.DateTimeField()
    content_type = models.CharField(max_length=128)
    content_encoding = models.CharField(max_length=64)
    result = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'django_celery_results_groupresult'


class DjangoCeleryResultsTaskresult(models.Model):
    task_id = models.CharField(unique=True, max_length=255)
    status = models.CharField(max_length=50)
    content_type = models.CharField(max_length=128)
    content_encoding = models.CharField(max_length=64)
    result = models.TextField(blank=True, null=True)
    date_done = models.DateTimeField()
    traceback = models.TextField(blank=True, null=True)
    meta = models.TextField(blank=True, null=True)
    task_args = models.TextField(blank=True, null=True)
    task_kwargs = models.TextField(blank=True, null=True)
    task_name = models.CharField(max_length=255, blank=True, null=True)
    date_created = models.DateTimeField()
    worker = models.CharField(max_length=100, blank=True, null=True)
    periodic_task_name = models.CharField(max_length=255, blank=True, null=True)
    date_started = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'django_celery_results_taskresult'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class DomainActivepagesection(models.Model):
    order = models.IntegerField()
    is_enabled = models.BooleanField()
    configuration = models.JSONField()
    page = models.ForeignKey('DomainBarbeariacustompage', models.DO_NOTHING)
    section = models.ForeignKey('DomainPagesection', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'domain_activepagesection'


class DomainBarbearia(models.Model):
    id = models.CharField(primary_key=True, max_length=32)
    nome = models.CharField(max_length=100)
    slug = models.CharField(unique=True, max_length=50)
    telefone = models.CharField(max_length=20, blank=True, null=True)
    endereco = models.TextField(blank=True, null=True)
    cores = models.JSONField()
    logo = models.CharField(max_length=100, blank=True, null=True)
    horario_abertura = models.TimeField()
    horario_fechamento = models.TimeField()
    dias_funcionamento = models.JSONField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    enable_priority_queue = models.BooleanField()
    max_capacity = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'domain_barbearia'


class DomainBarbeariacustompage(models.Model):
    meta_title = models.CharField(max_length=100, blank=True, null=True)
    meta_description = models.TextField(blank=True, null=True)
    custom_css = models.TextField(blank=True, null=True)
    updated_at = models.DateTimeField()
    barbearia = models.OneToOneField(DomainBarbearia, models.DO_NOTHING)
    layout = models.ForeignKey('DomainPagelayout', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'domain_barbeariacustompage'


class DomainBarbeiro(models.Model):
    id = models.CharField(primary_key=True, max_length=32)
    nome = models.CharField(max_length=100)
    status = models.CharField(max_length=20)
    status_since = models.DateTimeField()
    barbearia = models.ForeignKey(DomainBarbearia, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'domain_barbeiro'


class DomainBarbeiroEspecialidades(models.Model):
    barbeiro = models.ForeignKey(DomainBarbeiro, models.DO_NOTHING)
    servico = models.ForeignKey('DomainServico', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'domain_barbeiro_especialidades'
        unique_together = (('barbeiro', 'servico'),)


class DomainCliente(models.Model):
    id = models.CharField(primary_key=True, max_length=32)
    nome = models.CharField(max_length=100)
    telefone = models.CharField(max_length=15)
    email = models.CharField(max_length=254, blank=True, null=True)
    created_at = models.DateTimeField()
    is_vip = models.BooleanField()
    last_visit = models.DateTimeField(blank=True, null=True)
    total_visits = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'domain_cliente'


class DomainEntradafila(models.Model):
    id = models.CharField(primary_key=True, max_length=32)
    status = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    horario_atendimento = models.DateTimeField(blank=True, null=True)
    horario_finalizacao = models.DateTimeField(blank=True, null=True)
    barbearia = models.ForeignKey(DomainBarbearia, models.DO_NOTHING)
    cliente = models.ForeignKey(DomainCliente, models.DO_NOTHING)
    servico = models.ForeignKey('DomainServico', models.DO_NOTHING)
    estimativa_duracao = models.IntegerField()
    last_updated = models.DateTimeField()
    notified = models.BooleanField()
    position_number = models.IntegerField()
    prioridade = models.IntegerField()
    time_in_queue = models.IntegerField()
    barbeiro = models.ForeignKey(DomainBarbeiro, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'domain_entradafila'


class DomainGalleryimage(models.Model):
    image = models.CharField(max_length=100)
    title = models.CharField(max_length=100, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    order = models.IntegerField()
    barbearia = models.ForeignKey(DomainBarbearia, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'domain_galleryimage'


class DomainPagelayout(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    thumbnail = models.CharField(max_length=100, blank=True, null=True)
    created_at = models.DateTimeField()
    is_active = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'domain_pagelayout'


class DomainPagesection(models.Model):
    name = models.CharField(max_length=100)
    section_type = models.CharField(max_length=20)
    description = models.TextField(blank=True, null=True)
    template_path = models.CharField(max_length=200)
    is_required = models.BooleanField()
    order_index = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'domain_pagesection'


class DomainServico(models.Model):
    id = models.CharField(primary_key=True, max_length=32)
    nome = models.CharField(max_length=100)
    descricao = models.TextField(blank=True, null=True)
    preco = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    duracao = models.IntegerField()
    created_at = models.DateTimeField()
    barbearia = models.ForeignKey(DomainBarbearia, models.DO_NOTHING)
    complexity = models.IntegerField()
    popularity = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'domain_servico'


class DomainTestimonial(models.Model):
    author_name = models.CharField(max_length=100)
    author_image = models.CharField(max_length=100, blank=True, null=True)
    content = models.TextField()
    rating = models.IntegerField()
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    barbearia = models.ForeignKey(DomainBarbearia, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'domain_testimonial'
