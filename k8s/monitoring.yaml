apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "queuehub-rules.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      - job_name: 'queuehub-api'
        static_configs:
          - targets: ['queuehub-api-service.queuehub.svc.cluster.local:80']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s

      - job_name: 'queuehub-health'
        static_configs:
          - targets: ['queuehub-api-service.queuehub.svc.cluster.local:80']
        metrics_path: '/health'
        scrape_interval: 30s
        scrape_timeout: 10s

      - job_name: 'queuehub-performance'
        static_configs:
          - targets: ['queuehub-api-service.queuehub.svc.cluster.local:80']
        metrics_path: '/api/performance'
        scrape_interval: 60s
        scrape_timeout: 15s

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__

  queuehub-rules.yml: |
    groups:
      - name: queuehub
        rules:
          # High response time alert
          - alert: HighResponseTime
            expr: http_request_duration_seconds{quantile="0.95"} > 2
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High response time detected"
              description: "95th percentile response time is {{ $value }}s for {{ $labels.instance }}"

          # High error rate alert
          - alert: HighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value | humanizePercentage }} for {{ $labels.instance }}"

          # Memory usage alert
          - alert: HighMemoryUsage
            expr: (container_memory_usage_bytes{container="queuehub-api"} / container_spec_memory_limit_bytes{container="queuehub-api"}) > 0.85
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is {{ $value | humanizePercentage }} for {{ $labels.instance }}"

          # CPU usage alert
          - alert: HighCpuUsage
            expr: (rate(container_cpu_usage_seconds_total{container="queuehub-api"}[5m]) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "CPU usage is {{ $value }}% for {{ $labels.instance }}"

          # Queue operation performance alert
          - alert: SlowQueueOperations
            expr: queue_operation_duration_seconds{quantile="0.95"} > 5
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Slow queue operations detected"
              description: "95th percentile queue operation time is {{ $value }}s for {{ $labels.instance }}"

          # Health check failure alert
          - alert: HealthCheckFailed
            expr: up{job="queuehub-health"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Health check failed"
              description: "Health check endpoint is down for {{ $labels.instance }}"

          # Rate limiting alert
          - alert: HighRateLimitHits
            expr: rate(rate_limit_exceeded_total[5m]) > 10
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High rate limiting detected"
              description: "Rate limit exceeded {{ $value }} times per second for {{ $labels.instance }}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
        command:
        - /bin/prometheus
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=30d
        - --web.enable-lifecycle
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  prometheus.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus:9090
        access: proxy
        isDefault: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  queuehub-dashboard.json: |
    {
      "dashboard": {
        "title": "QueueHub Dashboard",
        "panels": [
          {
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "http_request_duration_seconds{quantile=\"0.95\"}",
                "legendFormat": "95th percentile"
              }
            ]
          },
          {
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total[5m])",
                "legendFormat": "requests/sec"
              }
            ]
          },
          {
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{status=~\"5..\"}[5m])",
                "legendFormat": "errors/sec"
              }
            ]
          },
          {
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "container_memory_usage_bytes{container=\"queuehub-api\"} / 1024 / 1024",
                "legendFormat": "Memory (MB)"
              }
            ]
          },
          {
            "title": "CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{container=\"queuehub-api\"}[5m]) * 100",
                "legendFormat": "CPU %"
              }
            ]
          },
          {
            "title": "Queue Operations",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(queue_operations_total[5m])",
                "legendFormat": "operations/sec"
              }
            ]
          }
        ]
      }
    }

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: monitoring
type: Opaque
data:
  admin-password: <base64-encoded-password>

---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
